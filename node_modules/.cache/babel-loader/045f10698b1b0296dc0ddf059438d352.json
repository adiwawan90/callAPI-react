{"ast":null,"code":"var _jsxFileName = \"/home/adi/Documents/belajar/src/App.js\";\n// import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\nimport List from './List';\n\nclass App extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state ={\n  //     todoItem: '',\n  //     items: []\n  //   }\n  // }\n  // handleSubmit = (e) => {\n  //   e.preventDefault() //mencegah reload\n  //   this.setState({\n  //     items: [...this.state.items, this.state.todoItem], \n  //     //data array, jk kosong y kosong, jk ada isi akan digabung dgn *nilai baru*/ concat\n  //     // *nilai baru didapat dari mana, dari line 39, setiap user merubah atau mengetik dan add akan merubah nilai todo item dan digabung di array items\n  //     todoItem: '' //setelah di klik todoItems akan dikosongkan kembali\n  //   })\n  //   // console.log('Terpanggil')\n  // }\n  // handleChange = (e) =>{\n  //   this.setState({\n  //     todoItem: e.target.value \n  //   })\n  // }\n  fetchPosts() {\n    // The API where we're fetching data from\n    fetch(\"https://newsapi.org/v2/top-headlines?country=us&apiKey=API_KEY\") // We get a response and receive the data in JSON format...\n    .then(response => response.json()) // ...then we update the state of our application\n    .then(data => this.setState({\n      posts: data,\n      isLoading: false\n    })) // If we catch errors instead of a response, let's update the app\n    .catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  } // konsumsi API API \n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    // var url = 'https://newsapi.org/v2/top-headlines?' +\n    // 'country=us&' +\n    // 'apiKey=API_KEY';\n    // var req = new Request(url);\n    // fetch(req)\n    // .then(response => console.log(response.json()))\n    //   .then(data => this.setState({items: data, isLoading:false }))\n    // fetch(\"https://newsapi.org/v2/top-headlines?country=us&apiKey=API_KEY\")\n    //   .then(response => response.json())\n    //   .then(data => this.setState({items: data, isLoading:false }))\n    this.fetchPosts();\n  }\n\n  render() {\n    // const {items, isLoading} = this.state\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          posts = _this$state.posts,\n          error = _this$state.error;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"React Fetch - Blog\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), !isLoading ? Object.keys(posts).map(key => React.createElement(Post, {\n      key: key,\n      body: posts[key],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Loading...\"));\n  }\n\n}\n\nexport default App; // <div>\n//         <form onSubmit={this.handleSubmit}> {/**ketika tombol add / submit di tekan akan menjalankan  fungsi handleSubmit */}\n//           <input value={this.state.todoItem} onChange={this.handleChange}></input>\n//           <button>ADD</button>\n//         </form>\n//         {/**semua daftar items di oper semua ke halaman componen List*/}\n//         <List items={this.state.items}></List> \n// </div>","map":{"version":3,"sources":["/home/adi/Documents/belajar/src/App.js"],"names":["React","Component","List","App","fetchPosts","fetch","then","response","json","data","setState","posts","isLoading","catch","error","constructor","props","state","items","componentDidMount","render","Object","keys","map","key"],"mappings":";AAAA;AACA,OAAO,WAAP;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAKA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAG1B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACAG,EAAAA,UAAU,GAAG;AACX;AACAC,IAAAA,KAAK,kEAAL,CACE;AADF,KAEGC,IAFH,CAEQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFpB,EAGE;AAHF,KAIGF,IAJH,CAKIG,IAAI,IACF,KAAKC,QAAL,CAAc;AACZC,MAAAA,KAAK,EAAEF,IADK;AAEZG,MAAAA,SAAS,EAAE;AAFC,KAAd,CANN,EAWE;AAXF,KAYGC,KAZH,CAYSC,KAAK,IAAI,KAAKJ,QAAL,CAAc;AAAEI,MAAAA,KAAF;AAASF,MAAAA,SAAS,EAAE;AAApB,KAAd,CAZlB;AAaD,GA1CyB,CA8C1B;;;AACAG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXN,MAAAA,SAAS,EAAE;AAFA,KAAb;AAID;;AAEDO,EAAAA,iBAAiB,GAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAKf,UAAL;AACD;;AAEDgB,EAAAA,MAAM,GAAG;AACP;AADO,wBAE6B,KAAKH,KAFlC;AAAA,UAECL,SAFD,eAECA,SAFD;AAAA,UAEYD,KAFZ,eAEYA,KAFZ;AAAA,UAEmBG,KAFnB,eAEmBA,KAFnB;AAKP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,EAGC,CAACF,SAAD,GAAaS,MAAM,CAACC,IAAP,CAAYX,KAAZ,EAAmBY,GAAnB,CAAuBC,GAAG,IAAI,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,GAAX;AAAgB,MAAA,IAAI,EAAEb,KAAK,CAACa,GAAD,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA9B,CAAb,GAAmF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHpF,CADF;AAOD;;AAjFyB;;AAoF5B,eAAerB,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\n\nimport React, { Component } from 'react';\nimport List from './List';\n\n\n\n\nclass App extends Component {  \n  \n  \n  // constructor(props) {\n  //   super(props);\n  //   this.state ={\n  //     todoItem: '',\n  //     items: []\n  //   }\n  // }\n\n  // handleSubmit = (e) => {\n  //   e.preventDefault() //mencegah reload\n  //   this.setState({\n  //     items: [...this.state.items, this.state.todoItem], \n  //     //data array, jk kosong y kosong, jk ada isi akan digabung dgn *nilai baru*/ concat\n  //     // *nilai baru didapat dari mana, dari line 39, setiap user merubah atau mengetik dan add akan merubah nilai todo item dan digabung di array items\n  //     todoItem: '' //setelah di klik todoItems akan dikosongkan kembali\n  //   })\n  //   // console.log('Terpanggil')\n  // }\n  \n  // handleChange = (e) =>{\n  //   this.setState({\n  //     todoItem: e.target.value \n  //   })\n  // }\n  fetchPosts() {\n    // The API where we're fetching data from\n    fetch(`https://newsapi.org/v2/top-headlines?country=us&apiKey=API_KEY`)\n      // We get a response and receive the data in JSON format...\n      .then(response => response.json())\n      // ...then we update the state of our application\n      .then(\n        data =>\n          this.setState({\n            posts: data,\n            isLoading: false,\n          })\n      )\n      // If we catch errors instead of a response, let's update the app\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n\n\n  // konsumsi API API \n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      isLoading: true\n    }\n  }\n  \n  componentDidMount(){\n    // var url = 'https://newsapi.org/v2/top-headlines?' +\n    // 'country=us&' +\n    // 'apiKey=API_KEY';\n    // var req = new Request(url);\n    // fetch(req)\n    // .then(response => console.log(response.json()))\n    //   .then(data => this.setState({items: data, isLoading:false }))\n    // fetch(\"https://newsapi.org/v2/top-headlines?country=us&apiKey=API_KEY\")\n    //   .then(response => response.json())\n    //   .then(data => this.setState({items: data, isLoading:false }))\n    this.fetchPosts();\n  }\n  \n  render() {\n    // const {items, isLoading} = this.state\n    const { isLoading, posts, error } = this.state;\n\n\n    return (\n      <React.Fragment>\n      <h1>React Fetch - Blog</h1>\n      <hr />\n      {!isLoading ? Object.keys(posts).map(key => <Post key={key} body={posts[key]} />) : <h3>Loading...</h3>}\n    </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n\n// <div>\n//         <form onSubmit={this.handleSubmit}> {/**ketika tombol add / submit di tekan akan menjalankan  fungsi handleSubmit */}\n//           <input value={this.state.todoItem} onChange={this.handleChange}></input>\n//           <button>ADD</button>\n//         </form>\n\n//         {/**semua daftar items di oper semua ke halaman componen List*/}\n//         <List items={this.state.items}></List> \n// </div>"]},"metadata":{},"sourceType":"module"}